step(0..n).
num(0..1000).
cood(0..board_size-1).

cell_count(N) :- N = (board_size * board_size) - 1.
block(1..N) : cell_count(N).

item(X) :- block(X).
item(hole).

cell(loc(X, Y)) :- cood(X), cood(Y).

fluent(on(I, C), inertial) :- item(I), cell(C).
fluent(weights_moved(N), inertial) :- num(N).
action(move(B, C)) :- block(B), cell(C).

same(C, C) :- cell(C).
-same(C1, C2) :- not same(C1, C2),
                 cell(C1), cell(C2).

% C1 is adjacent to C2 if C2 is adjacent to C1
adjacent(C1, C2) :- adjacent(C2, C1), cell(C1), cell(C2).

% Causal laws
% Moving B to C2 causes changes its position to C2 if C2 is adjacent to its current position
holds(on(B, C2), I+1) :- occurs(move(B, C2), I), holds(on(B, C1), I), adjacent(C1, C2).

% Moving B to C2 changes the position of the hole to C1 if B is on C1
holds(on(hole, C1), I+1) :- occurs(move(B, C2), I), holds(on(B, C1), I), adjacent(C1, C2).

% Moving a block increases the weights moved by the weight of the block
holds(weights_moved(N+W), I+1) :- occurs(move(B, C), I), holds(weights_moved(N), I), weight(B, W).

% State constraints
% An item can only be in one location
-holds(on(C, loc(X1, Y1)), I) :- holds(on(C, loc(X2, Y2)), I), -same(loc(X1, Y1), loc(X2, Y2)).

% Two items cannot share the same location
-holds(on(X, C), I) :- holds(on(Y, C), I), X != Y,
                       item(X), item(Y), cell(C).

% same(C1, C2) is true when C1 = C2 and false otherwise
same(C, C) :- cell(C).
-same(C1, C2) :- not same(C1, C2),
                 cell(C1), cell(C2).

% Uniqueness of values
-holds(weights_moved(N1), I) :- holds(weights_moved(N2), I), N1 != N2,
                                num(N1), num(N2).

% Executability conditions
% Block B can't be moved to cell C2 if the hole is not on C2
-occurs(move(B, C2), I) :- holds(on(B, C1), I), -holds(on(hole, C2), I).

% Inertial axioms
holds(F, I+1) :- fluent(F, inertial), holds(F, I), not -holds(F, I+1), I < n.
-holds(F, I+1) :- fluent(F, inertial), -holds(F, I), not holds(F, I+1), I < n.

% CWA for actions
-occurs(A, I) :- not occurs(A, I),
				 action(A), step(I).

% Planning module
% Failure is unacceptable
success :- goal(I).
:- not success.

% An action either occurs or not when the goal has not been achieved
occurs(A, I) | -occurs(A, I) :- not goal(I),
								action(A), step(I).

% Concurrent actions are not allowed
:- occurs(A1, I), occurs(A2, I), A1 != A2.

% An action must occur at each step before the goal is achieved
action_occurred(I) :- occurs(A, I).
:- not action_occurred(J), goal(I), J < I,
   step(I), step(J), not goal(I - 1).

total_weight(N) :- goal(I), holds(weights_moved(N), I).

holds(weights_moved(0), 0).

% We want to minimize the total weight
#minimize { X : total_weight(X) }.

#show occurs/2.
#show total_weight/1.
